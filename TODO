- [x] fix Display implementations for extension emums (that have extension suffix)
        This also fixes all shorthand generation for enumeration variants

- [x] consider how handles are passed in to functions and structs (somewhat inconvenient to need to manually get handle from handle owner)
        simply used into()

- [x] consider how to incorporate VkResult into return type for commands
        made custom error type a way to convert Vulkan error type thereto
        change the Vulkan error type name to VkResultRaw and custom error type name to VkResult

- [?] consider how to deal with "sudo" optional types, such as in VkWriteDescriptorSet
        maybe this is out of scope for this library

- [x] - still need device code build entry code for creating instance, and also build code for properly create Devices (load Device commands)


- [x] impl Debug for all generated types

- [x] create some kind of 'Entry' code for loading commands that do not take dispatchable handles

- [x] remember to deal with comands that still arn't generated (e.g. because they have a void param)
        I forgot I dealt with this a long time ago (around 11/5/2020 and 11/7/2020)

- [x] figure out how to represent void
        (some solution for this was made, but there may be room to improve this still)

- [x] IMPORTANT how to deal with HandleOwners when we don't own the handle
        e.g. we only "get" swapchain images (we do not create them and we should not destroy them)
        IDEA, HandleOwners should only be used from "create" commands. All other commands only return a basic handle.
                SUB PROBLEM: how to deal with CommandBuffers which still want to have command dispatch
                also PhysicalDevice
                also Queue
        FIXED: solution, HandleOwners have an 'Own' state that can be Owned, ManuallyManaged, and Borrowed.
                only Owned HandleOwners can destroy the handles
                ManuallyManaged is used for things that are allocated and should be manually freed.
                Everything derefs to Borrowed, which is also where most method implementations are
        Note: It would be nice in future to think of a better name than HandleOwner, since they do not necessarily "own" the handle anymore

- [partial] consider proper lifetimes more for creating and allocating where the passed in parameters such as "CreateInfo" structs
        pass handles that should also be borrowed by the created HandleOwner (such as in allocate_descriptor_sets)
        - can now have public lifetime (which we want to borrow through structures), and private lifetime (which should only be borrowed
        within a struct). This allows lifetimes when creating and allocating, and maybe some other places, to properly borrow necessary things
        such as handles, and also ensure that the borrowing is not to limiting by not unnecessarily borrowing
        - TODO - still need to consider if all times are correct, such as AllocationCallbacks

- [ ] fix struct generator macros
        right now, the macros are really awkward to use because .into() doesn't play nice with all types (especially numbers)
        also there are issues with creating references to temporary values being created (such as with &[] inside the macro call)

- [x] EXT_debug_utils_loader doesn't generate the proper loading commands for some reason
        this needs to be fixed in order to ever use the debug extesion (maybe other extension have same problemaybe other extension have same problem)
        LOL, my bad. I had intentionall excluded generating command loaders for EXT_debug_utils for some reason.
        I don't remeber why so I just removed this exclusion

- [x] Remove old needs_lifetime from global_data - being replaced by type_lifetimes
        - TODO - deal with unions, seems there are no current examples of a union that would need a lifetime anyway

- [x] NEED TO FIX COMMMANDS WHICH RETURN STRUCTS WITH P_NEXT
        I assumed before that a struct with p_next would be filled in by the vulkan implementation. However, this is wrong, and the user
        needs to provide the struct with the pNext chain already built.
        -- OLD -- Need to provide api that cat take user provided destination, and return the destination initialized
        Solution: made fuctions whcih return to p_next chains generic over the types that can be in the p_next chain

PROBLEM

The the output of vkxml (based on https://github.com/NicolBolas/New-Vulkan-XML-Format) generates an
incomplete version of the spec (despite how they advertise)

For now I have a work around to use vk-parse out put directly to make aliases properly, and will also
need this for generating all enums properly (in the case wherethe enum was promoted from an extension
to a core feature, the extension number and offset are moved in the spec to the Feature definitions).
There are probably other situations where information is incomplete.

In the long run, it will probably be best to have an initial parseing stage based on the vk spes own
python parser in order to generate the data I need. Then this can be further parsed with my rust code.
This will take substantail amounts of work and re orginizing of the code to work.

Or not. yolo
